AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  shyft-websockets-app
  SAM Template for shyft-websockets-app that has the DynamoDB table and Lambda
  functions needed to implement websocket api.
Parameters:
  ConnectionTableName:
    Type: String
    Default: 'shyft_connections'
    Description: (Required) The name of the new DynamoDB to store session information.
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  SessionTableName:
    Type: String
    Default: 'shyft_sessions'
    Description: (Required) The name of the new DynamoDB to store session information.
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  FileBucketName:
    Type: String
    Default: 'shyftfiles'
    Description: (Required) The name of the new S3 Bucket to store files in.
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters only. No numbers or special characters allowed.'

Resources:
  ShyftWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: ShyftWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.type"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ShyftWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ShyftWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ShyftWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ShyftWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  NewSessionRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ShyftWebSocket
      RouteKey: newSession
      AuthorizationType: NONE
      OperationName: NewSessionRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref NewSessionInteg
  NewSessionInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ShyftWebSocket
      Description: NewSession Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NewSessionFunction.Arn}/invocations
  ReconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ShyftWebSocket
      RouteKey: reconnect
      AuthorizationType: NONE
      OperationName: ReconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ReconnectInteg
  ReconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ShyftWebSocket
      Description: Reconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReconnectFunction.Arn}/invocations
  SecondaryConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ShyftWebSocket
      RouteKey: secondaryConnect
      AuthorizationType: NONE
      OperationName: SecondaryConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SecondaryConnectInteg
  SecondaryConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ShyftWebSocket
      Description: Secondary Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SecondaryConnectFunction.Arn}/invocations
  UploadInitRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ShyftWebSocket
      RouteKey: uploadInit
      AuthorizationType: NONE
      OperationName: UploadInitRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref UploadInitInteg
  UploadInitInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ShyftWebSocket
      Description: UploadInit Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadInitFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - NewSessionRoute
    - ReconnectRoute
    - SecondaryConnectRoute
    - DisconnectRoute
    - UploadInitRoute
    Properties:
      ApiId: !Ref ShyftWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref ShyftWebSocket
  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "sessionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "sessionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref SessionTableName
      TimeToLiveSpecification: 
        AttributeName: "expiry"
        Enabled: True
  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref ConnectionTableName
  S3FileBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FileBucketName
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedLayer 
      Description: Common code used across functions
      ContentUri: shared/
      CompatibleRuntimes:
        - nodejs8.10
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: onconnect/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs8.10
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ShyftWebSocket
      - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ondisconnect/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          SESSION_TABLE_NAME: !Ref SessionTableName
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref SessionTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionTableName
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ShyftWebSocket
      - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  NewSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: newSession/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          SESSION_TABLE_NAME: !Ref SessionTableName
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref SessionTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - 'arn:aws:execute-api:*:*:*/@connections/*'
  NewSessionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ShyftWebSocket
      - NewSessionFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NewSessionFunction
      Principal: apigateway.amazonaws.com
  ReconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: reconnect/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          SESSION_TABLE_NAME: !Ref SessionTableName
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref SessionTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionTableName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - 'arn:aws:execute-api:*:*:*/@connections/*'
  ReconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ShyftWebSocket
      - ReconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ReconnectFunction
      Principal: apigateway.amazonaws.com
  SecondaryConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: secondaryConnect/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          SESSION_TABLE_NAME: !Ref SessionTableName
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
          FILE_BUCKET_NAME: !Ref FileBucketName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref SessionTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionTableName
      - S3CrudPolicy:
          BucketName: !Ref FileBucketName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - 'arn:aws:execute-api:*:*:*/@connections/*'
  SecondaryConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ShyftWebSocket
      - SecondaryConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SecondaryConnectFunction
      Principal: apigateway.amazonaws.com
  UploadInitFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: uploadInit/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          SESSION_TABLE_NAME: !Ref SessionTableName
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
          FILE_BUCKET_NAME: !Ref FileBucketName
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref SessionTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionTableName
      - S3CrudPolicy:
          BucketName: !Ref FileBucketName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - 'arn:aws:execute-api:*:*:*/@connections/*'
  UploadInitPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ShyftWebSocket
      - UploadInitFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UploadInitFunction
      Principal: apigateway.amazonaws.com
  FileUploadedFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: fileUploaded/
      Handler: app.handler
      MemorySize: 128
      Runtime: nodejs8.10
      Layers:
        - !Ref SharedLayer
      Environment:
        Variables:
          SESSION_TABLE_NAME: !Ref SessionTableName
          CONNECTION_TABLE_NAME: !Ref ConnectionTableName
          FILE_BUCKET_NAME: !Ref FileBucketName
          DOMAIN_NAME: !Join [ '', [ !Ref ShyftWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com'] ]
          STAGE_NAME: !Ref Stage
      Events:
        FileUploadedEvent:
          Type: S3
          Properties:
            Bucket: !Ref S3FileBucket
            Events: s3:ObjectCreated:Put
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref SessionTableName
      - DynamoDBCrudPolicy:
          TableName: !Ref ConnectionTableName
      - S3CrudPolicy:
          BucketName: !Ref FileBucketName
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - 'arn:aws:execute-api:*:*:*/@connections/*'

Outputs:
  ConnectionsTableArn:
    Description: "Connections table ARN"
    Value: !GetAtt ConnectionsTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  NewSessionFunctionArn:
    Description: "NewSession function ARN"
    Value: !GetAtt NewSessionFunction.Arn

  ReconnectFunctionArn:
    Description: "Reconnect function ARN"
    Value: !GetAtt ReconnectFunction.Arn

  SecondaryConnectFunctionArn:
    Description: "Secondary Connect function ARN"
    Value: !GetAtt SecondaryConnectFunction.Arn

  UploadInitFunctionArn:
    Description: "Upload Init function ARN"
    Value: !GetAtt UploadInitFunction.Arn

  FileUploadedFunctionArn:
    Description: "File Uploaded function ARN"
    Value: !GetAtt FileUploadedFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref ShyftWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]